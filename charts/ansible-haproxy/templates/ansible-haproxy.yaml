{{ $host := index .Values "server" }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ansible
  labels:
    app: ansible
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ansible
  template:
    metadata:
      labels:
        app: ansible
    spec:
      containers:
        - name: ansible
          image: ansible/ansible
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ansible-haproxy-cm
data:
  hosts.yaml: |
    ---
    server:
      hosts:
          {{ .Values.server.ip }}:
  haproxy.yaml: |
    ---
    - name: install haproxy
      hosts: server
      vars:
        ansible_user: root
      tasks:

        - name: apt update
          ansible.builtin.apt:
            update_cache: yes

        - name: install packages
          ansible.builtin.apt:
            name:
              - haproxy
            state: present

        - name: Ensure haproxy conf is set
          template: 
            src: templates/haproxy.cfg.j2 
            dest: /etc/haproxy/haproxy.cfg

        - name: Ensure haproxy is restarted
          service:  
            name: haproxy
            state: restarted
            enabled: yes

  haproxy.cfg.j2: |
    global
        log /dev/log	local0
        log /dev/log	local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

    defaults
        log	global
        mode	http
        option	httplog
        option	dontlognull
            timeout connect 5000
            timeout client  50000
            timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

    #DNS FORWARDER

    frontend main
    bind {{ .Values.server.ip }}:443
    bind {{ .Values.server.ip }}:80
    mode tcp
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }
    default_backend main
    http-request redirect scheme https unless { ssl_fc }

    backend main
    mode tcp
    option ssl-hello-chk
{{ range $tunnel := .Values.ansible.haproxy.tunnel }}
    #tunnel - {{ $tunnel.name }}
    acl {{ $tunnel.name }} req.ssl_sni -i {{ $tunnel.name }}.{{ $host.host }}
    use-server {{ $tunnel.name }} if {{ $tunnel.name }}
    server {{ $tunnel.name }} {{ $tunnel.ip }}:{{ $tunnel.port }} {{ if $tunnel.proxy }}send-proxy-v2{{ end }}
{{ end }}
{{ range $other := .Values.ansible.haproxy.tunnel }}
    #other - {{ $other.name }}
    acl {{ $other.name }} req.ssl_sni -i {{ $other.name }}.{{ $host.host }}
    use-server {{ $other.name }} if {{ $other.name }}
    server {{ $other.name }} {{ $other.ip }}:{{ $other.port }} {{ if $other.proxy }}send-proxy-v2 {{ end }}
{{ end }}
